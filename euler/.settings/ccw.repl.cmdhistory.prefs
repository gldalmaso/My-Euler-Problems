#Mon Dec 26 06:49:00 BRST 2011
cmdhistory=["(reduce + (range 1 10))" "(reduce + (range 1 11))" "(reduce + (range 1 12))" "(reduce + (range 1 13))" "(reduce + (range 1 14))" "(doc reduce\\n     )" "(src reduce)" "(range 1 11)" "(doc loop)" "(+ 1 2)" "(doc reduce)" "(defn loop-inc (loop [n n] (if (\= n 0) (print n) (recur (dec n))))" "(defn loop-inc (loop [n n] (if (\= n 0) (print n) (recur (dec n)))))" "(defn loop-inc [n] (loop [n n] (if (\= n 0) (print n) (recur (dec n)))))" "(loop-inc 10)" "(defn loop-inc [n] (loop [n n] (print n) (if (\= n 0) (print n) (recur (dec n)))))" "(loop-inc 10)\\n" "(defn fibonacci-inc [[a b]] [b (+ a b)])" "(fibonacci-inc [0 1])" "(fibonacci-inc [1 2])" "(fibonacci-inc [3 4])" "(fibonacci-inc [1 2])" "((fn [[a b]] [b (+ a b)]) [0 1])" "((fn [x] (repeat x)) 10)" "((fn [x] (print x)) 10)" "(defn fibonnaci [n] \\n  (reduce\\n    (fn [[a b] _] (b (+ a b)))\\n    [1 2]\\n    (range 10))\\n  )" "(fibonnaci 10)" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b] _] (b (+ a b)))\\n    [1 2]\\n    (range n))\\n  )" "(fibonacci 10)" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b] _] [b (+ a b)])\\n    [1 2]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b] _] [b (+ a b)])\\n    [0 1]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b]] [b (+ a b)])\\n    [1 2]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b] _] (conj [a b] '(+ a b)))\\n    [0 1]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(doc conj)" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b] _] (conj [a b] (+ a b)))\\n    [0 1]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [[a b] _] (vector (conj [a b] (+ a b))))\\n    [0 1]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [x _] (conj x (+ (last x) _)))\\n    [0 1]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [x _] (conj x (+ (last x) _)))\\n    [1 2]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [x _] (conj x (apply + (take 2 x))))\\n    [1 2]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(conj [1 2] (apply + (take 2 [1 2])))" "(conj [2 3] (apply + (take 2 [2 3])))" "(conj [1 2 3] (apply + (take 2 [1 2 3])))" "(defn fibonacci [n] \\n  (reduce\\n    (fn [x _] (conj x (apply + (drop (- (count x) 2) x))))\\n    [1 2]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [x _] (conj x (apply + (drop (- (count x) 2) x))))\\n    [0 1]\\n    (range n))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n] \\n  (reduce\\n    (fn [x _] (conj x (apply + (drop (- (count x) 2) x))))\\n    [1 2]\\n    (range (- n 2)))\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n]\\n  (filter\\n    even?\\n\\t  (reduce\\n\\t    (fn [x _] (conj x (apply + (drop (- (count x) 2) x))))\\n\\t    [1 2]\\n\\t    (range (- n 2)))\\n\\t  )\\n  )" "(fibonacci 10)\\n" "(defn fibonacci [n]\\n  (apply\\n    +\\n\\t  (filter\\n\\t    even?\\n\\t\\t  (reduce\\n\\t\\t    (fn [x _] (conj x (apply + (drop (- (count x) 2) x))))\\n\\t\\t    [1 2]\\n\\t\\t    (range (- n 2)))\\n\\t\\t  )\\n\\t  )\\n  )" "(fibonacci 10)\\n" "(defn fibonacci-roof [n]\\n  ((fn [a n] (loop [a a n n]\\n             let [b (apply + (drop (- (count a) 2) a))]\\n             (if (> b n)\\n               a\\n               (recur (conj a b) n)))) \\n    [1 2]))" "(defn fibonacci-roof [n]\\n  ((fn [a n] (loop [a a n n]\\n             (let [b (apply + (drop (- (count a) 2) a))]\\n\\t             (if (> b n)\\n\\t               a\\n\\t               (recur (conj a b) n))))) \\n    [1 2]))" "(fibonacci-roof 100)" "(defn fibonacci-roof [n]\\n  ((fn [a n] (loop [a a n n]\\n             (let [b (apply + (drop (- (count a) 2) a))]\\n\\t             (if (> b n)\\n\\t               a\\n\\t               (recur (conj a b) n))))) \\n    [1 2] n))" "(fibonacci-roof 100)\\n" "(fibonacci-roof 88)\\n" "(fibonacci-roof 188)\\n" "(fibonacci-roof 1880)\\n" "(defn fibonacci [n]\\n  (apply\\n    +\\n\\t  (filter\\n\\t    even?\\n\\t\\t  (fibonacci-roof n)\\n\\t\\t  )\\n\\t  )\\n  )" "(fibonacci 5)" "(fibonacci 1000)" "(fibonacci 4000000)" "(time (fibonacci 4000000))" "(time (fibonacci 4000000000N))"]
eclipse.preferences.version=1
